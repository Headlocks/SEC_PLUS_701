## Chapter 10: Security Implications of Architecture Models

### Cloud Computing
- Offers on-demand services that extend computer or network capabilities

#### Benefits
- Lower costs
- Reduced administration and maintenance
- Increased reliability
- Improved scalability
- Higher performance (potentially)

#### Concerns
- Lack of administrative control
- Security

### Infrastructure as Code (IaC)
- Involves managing and provisioning computer data centers through machine-readable definition files
  - Replaces physical hardware configuration and interactive configuration tools
  - Provides the scalability and integrations necessary for modern applications and deployments

### Serverless Architecture
- Uses cloud platforms like AWS, Azure, and Google Cloud to host and develop code
  - Doesn't mean the absence of servers; rather, cloud providers dynamically manage server allocation and provisioning
  - Example: AWS Lambda is a popular serverless architecture.

### Network Infrastructure
- Encompasses an organization's essential hardware and software for network connectivity, communication, operations, and management

### On-Premises Computing Architecture
- Involves housing and managing hardware, software, servers, and network resources within an organization's physical location
  - Organizations have complete control over and responsibility for their IT infrastructures, including management, maintenance, and security
  - May involve increased costs and complexity, requiring dedicated personnel and equipment for effective management and maintenance

### Centralized vs Decentralized
#### Centralized Access Control
- One entity is responsible for administering access to resources
- Characterized by consolidating control, data storage, and processing in a single location or server
- Offers uniformity and consistency in decision-making

#### Decentralized Access Control
- More than one entity is responsible for administering access to resources
- Distributes data and control across multiple locations, servers, or nodes
- Offers higher resilience, flexibility, and autonomy

### Containerization and Virtualization
#### Containerization
- Packaging applications in containers makes sharing and deployment easier
- Applications consist of language runtimes, libraries, and source code, which can introduce dependencies

#### Virtualization
- Creates multiple simulated environments or dedicated resources from a single physical hardware system
- Benefits include cost reduction, resource optimization, and scalability

### Internet of Things (IoT)
- Encompasses interconnected physical devices that exchange data over the internet or other networks

#### Components
- Sensors
- Smart devices
- Wearables
- Facility automation

### Industrial Control Systems (ICS) / Supervisory Control and Data Acquisition (SCADA)
- ICSs and SCADA enable organizations to monitor equipment processes, collect data, perform analysis, and remotely control devices and processes
  - Play a crucial role in maintaining efficiency, enabling data-driven decisions, and mitigating downtime in industrial settings
  - To defend against cyberattacks, SCADA networks should be isolated from corporate networks

### Real-Time Operating System (RTOS)
- RTOS rapidly switches between tasks, giving the illusion of simultaneous execution of multiple programs on a single processing core
  - Provides hard real-time responses with fast and deterministic reactions to external events
  
#### Security Measures
- Minimize the attack surface by disabling unnecessary features, services, and access
- Assume that external systems are insecure

### Embedded Systems
- Are specialized computer systems designed for specific functions within larger systems, often with significant design constraints
  - Constraints include cost, long lifecycle, real-time requirements, and reliability needs
  - Often optimized for lifecycle and business-driven factors rather than security or maximum computing throughput

### High Availability (HA)
- Refers to operational performance, usually uptime. It ensures users' ability to access a system or service without interruptions.

#### Principles of System Design
- Eliminate single points of failure
- Reliable crossover
- Detection of failures

### Considerations
#### Availability
- Ensuring continuous business operations with redundant components, load balancing, and failover mechanisms

#### Resilience
- Building comprehensive preventive measures and recovery strategies to withstand failures and attacks

#### Cost
- Balancing expenses in acquisition, implementation, operation, and maintenance while optimizing resource utilization

#### Responsiveness
- Optimizing performance and automating tasks to efficiently meet user demands

#### Scalability
- Designing systems capable of growing or shrinking in response to changes in demand

#### Ease of Deployment
- Simplifying implementation through standardized configurations and automation

#### Risk Transference
- Strategically shifting risks to other parties while maintaining accountability

#### Ease of Recovery
- Establishing robust disaster recovery and business continuity plans to minimize downtime

#### Patch Availability
- Ensuring timely access to software updates and fixes

#### Inability to Patch
- The challenge of being unable to apply critical security updates, often because of legacy systems or technical constraints

#### Power
- Optimizing energy efficiency and resilience against power-based attacks across the entire network

#### Computing Resources
- Effectively distributing and optimizing hardware and software components for data processing and computation
